import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
}

group 'cs471'
version '1.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//customize the jar task to include a manifest with the correct main class
jar {
    def fileNameOfCreatedJar = "${baseName}-${version}.jar"
    //print ("\nfileNameOfCreatedJar = " + fileNameOfCreatedJar)

    manifest {
        attributes(
            'Main-Class': 'edu.boisestate.cs.cs471classexercise.builder.MainApp',

            //optional attributes
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
            'Implementation-Title': 'MainApp',
            'Implementation-Version': version
        )
    }

    from {
        // include in the jar all external dependencies (e.g., gson)
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // print instructions to run the jar, but only if the creation of the jar is successful
    {
        doLast {
            def outputFirstLine = 'The "' + fileNameOfCreatedJar + '" was created successfully. Run:'
            def outputSecondLine = '$ java -jar build/libs/' + fileNameOfCreatedJar + ' [arguments]'
            def repeatLength = Math.max(outputFirstLine.length(), outputSecondLine.length())

            println '\n' + ('-' * repeatLength)
            println outputFirstLine
            println outputSecondLine
            println ('-' * repeatLength)
        }

        onlyIf {
            state.failure == null
        }
    }
}
